version: '3.8'

services:
  mcp:
    build: .
    ports:
      - '8000:8000'
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app/src
      - PYTHONUNBUFFERED=1
      - SERVICE_NAME=multi-agent-code-analyzer
      - SERVICE_PORT=8000
      - ENVIRONMENT=development
      - DEBUG=true
      - METRICS_ENABLED=true
      - LOG_LEVEL=DEBUG
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=development_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=development_password
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
      - PROMETHEUS_METRICS_PORT=8000
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_OWNER=${GITHUB_OWNER}
      - GITHUB_REPO=${GITHUB_REPO}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - mcp_network
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      standalone:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  neo4j:
    image: neo4j:5.13.0
    environment:
      - NEO4J_AUTH=neo4j/development_password
    ports:
      - '7474:7474'
      - '7687:7687'
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - mcp_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'wget', 'http://localhost:7474', '-O', '/dev/null']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7.2
    command: redis-server --requirepass development_password
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - mcp_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  etcd:
    image: bitnami/etcd:latest
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
      - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
    ports:
      - '12379:2379'
    volumes:
      - etcd_data:/bitnami/etcd
    networks:
      - mcp_network
    restart: unless-stopped
    healthcheck:
      test: ['CMD', '/opt/bitnami/etcd/bin/etcdctl', 'endpoint', 'health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  minio:
    image: minio/minio:RELEASE.2023-11-20T22-40-07Z
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - mcp_network
    healthcheck:
      test: ['CMD', 'mc', 'ready', 'local']
      interval: 30s
      timeout: 10s
      retries: 3

  standalone:
    image: milvusdb/milvus:v2.3.3
    command: ['milvus', 'run', 'standalone']
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - '19530:19530'
      - '9091:9091'
    depends_on:
      - 'etcd'
      - 'minio'
    networks:
      - mcp_network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9091/healthz']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  mcp_network:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  redis_data:
  etcd_data:
  minio_data:
  milvus_data:
