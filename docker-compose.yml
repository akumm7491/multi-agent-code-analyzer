services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env
      - ${REPO_PATH:-./repo}:/app/repo
    environment:
      - PYTHONPATH=/app
      - SERVICE_NAME=multi-agent-code-analyzer
      - SERVICE_PORT=8000
      - SERVICE_TYPE=mcp
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j:7687
      - MILVUS_HOST=standalone
      - MILVUS_PORT=19530
      - INITIALIZE_DB=true
      - RUN_MIGRATIONS=true
      - LOG_LEVEL=info
      - API_WORKERS=4
      - API_CONCURRENCY=1000
      - MCP_WORKERS=10
      - MCP_CONCURRENCY=1000
      - KEEP_ALIVE=120
      - DEBUG=true
      - ENVIRONMENT=development
    ports:
      - '8000:8000'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_started
      standalone:
        condition: service_started
    networks:
      - maca-network

  neo4j:
    image: neo4j:4.4
    platform: linux/arm64/v8
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/your_secure_password}
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=512M
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_bolt_advertised__address=0.0.0.0:7687
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_allow__upgrade=true
      - NEO4J_dbms_mode=SINGLE
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
      - NEO4J_dbms_connector_http_advertised__address=0.0.0.0:7474
      - NEO4J_dbms_security_auth__enabled=true
    ports:
      - '7474:7474'
      - '7687:7687'
    volumes:
      - neo4j-data:/data
    healthcheck:
      test: ['CMD', 'wget', 'http://localhost:7474', '-O', '/dev/null']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - maca-network

  standalone:
    image: milvusdb/milvus:v2.3.3
    command: ['milvus', 'run', 'standalone']
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
      ETCD_USE_EMBED: 'true'
      COMMON_STORAGETYPE: local
      COMMON_STORAGE_PATH: /var/lib/milvus
      MILVUS_ENABLE_MONITOR: 'false'
    volumes:
      - milvus-data:/var/lib/milvus
    ports:
      - '19530:19530'
      - '9091:9091'
    depends_on:
      - 'etcd'
      - 'minio'
    networks:
      - maca-network

  etcd:
    image: bitnami/etcd:latest
    platform: linux/arm64/v8
    environment:
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    volumes:
      - etcd-data:/bitnami/etcd
    networks:
      - maca-network

  minio:
    image: minio/minio:latest
    platform: linux/arm64/v8
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - maca-network

  redis:
    image: redis:7-alpine
    platform: linux/arm64/v8
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_secure_redis_password}
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - maca-network

networks:
  maca-network:
    driver: bridge

volumes:
  redis-data:
  neo4j-data:
  milvus-data:
  etcd-data:
  minio-data:
