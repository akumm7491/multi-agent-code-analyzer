version: '3.8'

services:
  neo4j:
    image: neo4j:4.4
    container_name: neo4j
    hostname: neo4j
    ports:
      - '7474:7474'
      - '7687:7687'
    environment:
      - NEO4J_AUTH=none
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_dbms_connector_bolt_advertised__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_advertised__address=0.0.0.0:7474
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
      - NEO4J_dbms_memory_pagecache_size=512m
      - NEO4J_dbms_default__database=neo4j
      - NEO4J_dbms_security_auth__enabled=false
      - NEO4J_dbms_connector_bolt_enabled=true
      - NEO4J_dbms_connector_bolt_tls__level=DISABLED
    volumes:
      - neo4j_data:/data
    networks:
      - analyzer-network
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget --no-verbose --tries=1 --spider http://localhost:7474/ || exit 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:6.2-alpine
    container_name: redis
    hostname: redis
    ports:
      - '6381:6379'
    command: redis-server --requirepass ${REDIS_PASSWORD} --port 6379
    volumes:
      - redis_data:/data
    networks:
      - analyzer-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd_data:/etcd
    command:
      - etcd
      - --advertise-client-urls=http://127.0.0.1:2379
      - --listen-client-urls=http://0.0.0.0:2379
      - --data-dir=/etcd
    networks:
      - analyzer-network
    healthcheck:
      test: ['CMD', 'etcdctl', 'endpoint', 'health']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s

  milvus:
    platform: linux/amd64
    image: milvusdb/milvus:v2.2.11
    container_name: milvus-standalone
    hostname: milvus
    command: ['milvus', 'run', 'standalone']
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - ETCD_CFG.endpoints.1=etcd:2379
      - COMMON_CFG.etcd.endpoints=["etcd:2379"]
    ports:
      - '19531:19530'
      - '9092:9091'
    volumes:
      - milvus_data:/var/lib/milvus
    networks:
      - analyzer-network
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9091/healthz']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 15s

  prometheus:
    image: prom/prometheus:v2.37.0
    container_name: prometheus
    hostname: prometheus
    ports:
      - '9094:9090'
    volumes:
      - ./prometheus:/etc/prometheus
    networks:
      - analyzer-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - mcp

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    ports:
      - '3000:3000'
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - analyzer-network
    depends_on:
      - prometheus

  mcp:
    build:
      context: .
      dockerfile: Dockerfile.mcp
    container_name: mcp
    hostname: mcp
    environment:
      - SERVICE_TYPE=mcp
      - SERVICE_PORT=50051
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=
      - PYTHONUNBUFFERED=1
      - DEBUG=true
      - LOG_LEVEL=DEBUG
    ports:
      - '50052:50051'
    depends_on:
      neo4j:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
      milvus:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - analyzer-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:50051/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    command: >
      bash -c "sleep 10 && /app/entrypoint.sh"

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multi-agent-code-analyzer-api
    hostname: api
    environment:
      - SERVICE_TYPE=api
      - MCP_HOST=mcp
      - MCP_PORT=50051
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j:7687
      - MILVUS_HOST=milvus
      - MILVUS_PORT=19530
      - PYTHONUNBUFFERED=1
    ports:
      - '8000:8000'
    env_file: .env
    depends_on:
      mcp:
        condition: service_healthy
    volumes:
      - .:/app
    networks:
      - analyzer-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000/health']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  agent_manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: multi-agent-code-analyzer-agent_manager
    hostname: agent_manager
    environment:
      - SERVICE_TYPE=agent_manager
      - MCP_HOST=mcp
      - MCP_PORT=50051
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NEO4J_URI=bolt://neo4j:7687
      - PYTHONUNBUFFERED=1
    env_file: .env
    depends_on:
      mcp:
        condition: service_healthy
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - analyzer-network

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - '9001:9001'
      - '9000:9000'
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - analyzer-network

networks:
  analyzer-network:
    driver: bridge
    name: analyzer-network

volumes:
  neo4j_data:
  redis_data:
  milvus_data:
  grafana_data:
  etcd_data:
  minio_data:
